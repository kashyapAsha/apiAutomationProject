package com.til.colombia.expresso.base;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.concurrent.TimeUnit;
import org.apache.http.ParseException;
import org.apache.log4j.Logger;
import org.openqa.selenium.Alert;
import org.openqa.selenium.PageLoadStrategy;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.FirefoxProfile;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.remote.CapabilityType;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.testng.annotations.AfterSuite;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeSuite;

import com.til.colombia.expresso.apiConfig.ApiPath;
import com.til.colombia.expresso.pageobjects.prod.LoginPage;
import com.til.colombia.expresso.utility.Path;
import com.til.colombia.expresso.utility.ReadPropertyFile;

import io.github.bonigarcia.wdm.WebDriverManager;
import io.restassured.RestAssured;
import io.restassured.response.Response;

public class BaseTestSetup {
	
	public static final long WEB_ELEMENT_WAIT = 3000L;
	public static Logger LOGGER = Logger.getLogger(BaseTestSetup.class);
	static public WebDriver driver;
	private String url,browsertype;
	private String driverLocation = Path.PATH_TO_DRIVERS;
	String downloadFilepath = Path.DOWNLOADS_FOLDER_PATH;
	LoginPage loginPage;
	public static String access_Token="";
	public  String apiBaseURL=ReadPropertyFile.readAppData("api_base_url");
	
	public String user=ReadPropertyFile.readAppData("api_username");
	public String pwd=ReadPropertyFile.readAppData("api_password");

	public WebDriver getDriver() {
		return driver;
	}
	
	static 
	{   
			System.setProperty("env", "Api");
			//System.setProperty("browser", "chrome");
		  // System.setProperty("suiteXmlFile", "expressoRegression.xml");
	}
	
	public BaseTestSetup() {
		File file = new File(downloadFilepath);
		if (!file.exists())	{
			file.mkdirs();
		}	
	
	}

	@BeforeSuite
	public void setDriver() throws IOException, InterruptedException {
		
		if(!(System.getProperty("env")=="Api")) {
			System.out.println("--- Env = "+System.getProperty("env"));
			
			if(System.getProperty("env")==null){
				System.out.println("---Setting Environment as QA");
				System.setProperty("env", "qa");
			}
			
			
			
			
loginPage=new LoginPage();
/*if(loginPage.isWebsiteReachable()!=200)
{
			LOGGER.info("Website not reachable");
			fail("Website not reachable");
}*/

url = getUrl();
System.out.println("--- URL = "+url);
System.out.println("--- Browser = "+System.getProperty("browser"));

LOGGER.info(url);

				browsertype=System.getProperty("browser")==null?"chrome":System.getProperty("browser");
			if (browsertype.equalsIgnoreCase("chrome")) {
				driver = launchChromeDriver(url);
			}else if (browsertype.equalsIgnoreCase("firefox")) {
				driver = launchFirefoxDriver(url);
				driver.manage().window().maximize();
			}
			loginPage=new LoginPage(driver);
			loginPage.login();
		} else  {
			
				access_Token=getAccessToken();
		}
			 }
	

	public String getUrl() throws IOException {

		if (System.getProperty("env").equalsIgnoreCase("prod")) {
			url = ReadPropertyFile.readAppData("prod_url");
		} else if (System.getProperty("env").equalsIgnoreCase("qa")) {
			url = ReadPropertyFile.readAppData("qa_url");
		}
		else if (System.getProperty("env").equalsIgnoreCase("stag")) {
			url = ReadPropertyFile.readAppData("stag_url");
		}
		else if (System.getProperty("env").equalsIgnoreCase("ROLE_SALES_EXEC")) {
			url = ReadPropertyFile.readAppData("se_url");
		}
		else if (System.getProperty("env").equalsIgnoreCase("ROLE_SALES_MGR")) {
			url = ReadPropertyFile.readAppData("rh_url");
		}
		else if (System.getProperty("env").equalsIgnoreCase("ROLE_SALES_NATIONAL_HEAD")) {
			url = ReadPropertyFile.readAppData("nh_url");
		}
		else if (System.getProperty("env").equalsIgnoreCase("ROLE_SALES_HEAD")) {
			url = ReadPropertyFile.readAppData("sd_url");
		}
		else if (System.getProperty("env").equalsIgnoreCase("ROLE_COO")) {
			url = ReadPropertyFile.readAppData("coo_url");
		}
		else if (System.getProperty("env").equalsIgnoreCase("Api")) {
			url = ReadPropertyFile.readAppData("api_base_url");
		}

		return url;
	}
	
	@AfterSuite(alwaysRun=true)
	public void close() throws InterruptedException {
		try {
			driver.close();
			Alert alert = driver.switchTo().alert();
			alert.accept();
			driver.quit();
		} catch (Exception e) {
			// ignoring when alert is not present
		}

	}

	public WebDriver launchChromeDriver(String url) throws ParseException, IOException {
		int counter=0;
		System.setProperty("webdriver.chrome.driver",
				driverLocation + File.separator + ReadPropertyFile.readFromPropertyFile("chrome_driver"));
		WebDriverManager.chromedriver().setup();
		HashMap<String, Object> chromePrefs = new HashMap<String, Object>();
		chromePrefs.put("profile.default_content_settings.popups", 0);
		chromePrefs.put("download.default_directory", downloadFilepath);
		chromePrefs.put("credentials_enable_service", false);
		chromePrefs.put("profile.password_manager_enabled", false);
		
		ChromeOptions options = new ChromeOptions();
		options.addArguments("--start-maximized");
		options.setExperimentalOption("prefs", chromePrefs);
		options.setCapability(CapabilityType.ACCEPT_SSL_CERTS, true);
		
		/*DesiredCapabilities cap = DesiredCapabilities.chrome();
		cap.setCapability(CapabilityType.ACCEPT_SSL_CERTS, true);
		cap.setCapability(ChromeOptions.CAPABILITY, options);*/
		
		WebDriver driver = new ChromeDriver(options);
		driver.manage().timeouts().pageLoadTimeout(10, TimeUnit.MINUTES);
		driver.manage().window().maximize();
		
		do
		{
			System.out.println("===> DRIVER COUNTER = "+counter);
			driver.get(url);
			counter++;
		}while(!driver.getTitle().equals("Expresso") && counter<4);
		
		return driver;
	}

	public WebDriver launchIEDriver(String url) {
		System.setProperty("webdriver.ie.driver",
				driverLocation + File.separator + ReadPropertyFile.readAppData("ie_driver"));

		WebDriver driver = new InternetExplorerDriver();

		driver.get(url);
		return driver;
	}

	public WebDriver launchFirefoxDriver(String url) {
		//Added by Mukul 22-Mar-18
		System.setProperty("webdriver.gecko.driver",driverLocation + File.separator + ReadPropertyFile.readFromPropertyFile("gecko_firefox_driver"));
		//End		
		//WebDriver driver = new FirefoxDriver();
		DesiredCapabilities capabilities = new DesiredCapabilities();
		FirefoxProfile profile = new FirefoxProfile();
		profile.setPreference("browser.download.folderList", 2);
		profile.setPreference("browser.helperApps.alwaysAsk.force", false);
		profile.setPreference("browser.download.manager.showWhenStarting", false);
	
			
		profile.setPreference("browser.download.dir", downloadFilepath);
		profile.setPreference("browser.helperApps.neverAsk.saveToDisk",
				"text/csv,application/x-msexcel,application/excel,"
						+ "application/x-excel,application/vnd.ms-excel,image/png,image/jpeg,text/html,text/plain,"
						+ "application/msword,application/xml,text/csv");
		capabilities.setCapability(FirefoxDriver.PROFILE, profile);

		WebDriver driver = new FirefoxDriver(capabilities);
		driver.manage().window().maximize();
		driver.get(url);
		return driver;
	}

	public void implicitWait(int waittime) {
		driver.manage().timeouts().implicitlyWait(waittime, TimeUnit.SECONDS);
	}
	
	
	
	public String getAccessToken() {
	
		
		String url=apiBaseURL+ApiPath.Post_Generate_Token;
		//LOGGER.info(url);
		Response re= RestAssured.given().queryParams("grant_type", "password")
				.param("username", user)
				.param("password", pwd)
				.auth().basic("colombia-1","secret")
				.log().all().post(url);
		re.prettyPrint();
		//LOGGER.info("Getting response");
		String access_Token = re.jsonPath().get("access_token");
		//LOGGER.info("Successfully get token="+access_Token);
		System.out.println("token is="+access_Token);
		 return access_Token;	
	}
	

}
